import telebot
import subForPy
import random
# import logging

from telebot import types

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

bot = telebot.TeleBot(subForPy.TOKEN)
# ----------------–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ-–¥–ª—è-—é–∑–µ—Ä–∞-----------------
name = 'Tom'
surname = 'Bouble'
age = 0
points = 100
messagesToDelete = 0
# --------------------–ü—É—Ç—å-–∫-—Ñ–æ—Ç–æ----------------------
FILEWAY = 'D:\python\works\static\hello.webp'
FILEWAY2 = 'D:\python\works\static\photo_kh.jpg_large'
# ----------------–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–∏-–º–µ—Å—Ç–∞-----------------
places = [
    'http://bowling.mall.com.ua/',
    'https://icehall.com.ua/,',
    'http://www.izolyatsiya.com.ua/number-1408/'
]

places2 = [
    'https://centralpark.kh.ua/ua/',
    'https://zoo.kharkov.ua/',
    'https://feldman-ecopark.com/uk/'
]
places3 = [
    'http://myasoedov.com.ua/',
    'https://gdeburger.com/',
    'https://eatery.kh.ua/'
]
places4 = [
    'http://morskoimuzei.kh.ua/',
    'http://museum.kh.ua/',
    'https://artmuseum.kh.ua/'
]

our_users = [
    {
        'user':
        {
            'name': name,
            'surname': surname,
            'age': age
        }
    }
]
# ---------------------–†–∞–±–æ—Ç–∞-–±–æ—Ç–∞---------------------


@bot.message_handler(commands=['start'])
def welcome(message):
    bot.send_message(message.chat.id, "If you need a help - use /help")
    sti = open(FILEWAY, 'rb')
    bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂')
    item2 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    item3 = types.KeyboardButton('–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è')

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å —Ç–≤–æ—é —Ä—É—Ç–∏–Ω—É. –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /reg".format(message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['del'])
def deleting(message):
    bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫ ?')
    bot.register_next_step_handler(message, deleteMyMessage)


def deleteMyMessage(message):
    global messagesToDelete
    messagesToDelete = message.text

    while messagesToDelete == 0:
        try:
            messagesToDelete = int(message.text)
        except Exception:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏!')

    for id in range((message.message_id-int(messagesToDelete)), message.message_id):
        bot.delete_message(message.chat.id, id)


@bot.message_handler(commands=['help'])
def help_me(message):

    bot.send_message(
        message.chat.id, "1. To start using bot type /start and press ENTER")
    bot.send_message(message.chat.id, "2. Use /reg to create your profile")
    bot.send_message(message.chat.id, "3. Use /del to delete bot's messages")


@bot.message_handler(commands=['reg'])
def registration(message):

    bot.send_message(message.from_user.id,
                     '–Ø –∑–∞–¥–∞–º –ø–∞—Ä–æ—á–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç ?')
    bot.register_next_step_handler(message, reg_name)


def reg_name(message):
    global name
    name = message.text
    name = name.lower()
    name = name.capitalize()
    bot.send_message(message.from_user.id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è ?')
    bot.register_next_step_handler(message, reg_surname)


def reg_surname(message):
    global surname
    surname = message.text
    surname = surname.lower()
    surname = surname.capitalize()
    bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç ?')
    bot.register_next_step_handler(message, reg_age)


def reg_age(message):
    global age
    age = message.text

    while age == 0:
        try:
            age = int(message.text)
        except Exception:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ —Ü–∏—Ñ—Ä–∞–º–∏!')
    bot.send_message(message.from_user.id, '–¢–µ–±—è –∑–æ–≤—É—Ç: ' +
                     surname + ' ' + name + ' –∏ —Ç–µ–±–µ: ' + str(age) + ' –ª–µ—Ç')


@bot.message_handler(content_types=['text'])
def say(message):
    # bot.send_message(message.chat.id,message.text)
    if message.chat.type == 'private':
        if message.text == '–í—ã–±—Ä–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂':
            # bot.send_message(message.chat.id, "Nice! Let's try")

            markup = types.InlineKeyboardMarkup(row_width=4)
            item1 = types.InlineKeyboardButton(
                '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', callback_data='1')
            item2 = types.InlineKeyboardButton('–û—Ç–¥—ã—Ö', callback_data='2')
            item3 = types.InlineKeyboardButton('–ï–¥–∞', callback_data='3')
            item4 = types.InlineKeyboardButton(
                '–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ', callback_data='4')
            markup.add(item1, item2, item3, item4)

            ph = open(FILEWAY2, 'rb')
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', bot.send_photo(
                message.chat.id, ph), reply_markup=markup)

        elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':

            bot.send_message(message.from_user.id, '–ò–º—è: ' + str(name) + '\n' + '–§–∞–º–∏–ª–∏—è: ' + str(surname) + '\n'
                             + '–í–æ–∑—Ä–∞—Å—Ç: ' + str(age) + '\n' + '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:' + str(points))

            # keyboard
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
            item2 = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ ?',
                             reply_markup=markup)

        elif message.text == '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è':
            bot.send_message(
                message.chat.id, '–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n monobank: xxxxxxxxx\n privatbank: xxxxxxxxx')
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':  # –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
            markup3 = types.InlineKeyboardMarkup(row_width=4)
            item1 = types.InlineKeyboardButton('–ò–º—è', callback_data='8')
            item2 = types.InlineKeyboardButton('–§–∞–º–∏–ª–∏—è', callback_data='9')
            item3 = types.InlineKeyboardButton('–í–æ–∑—Ä–∞—Å—Ç', callback_data='10')
            markup3.add(item1, item2, item3)
            bot.send_message(
                message.chat.id, '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–º–µ–Ω—è—Ç—å ?', reply_markup=markup3)

        elif message.text == '–í–µ—Ä–Ω—É—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ':
            # keyboard
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂')
            item2 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
            item3 = types.KeyboardButton('–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è')

            markup.add(item1, item2, item3)

            bot.send_message(
                message.chat.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ!', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂')
    item2 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    item3 = types.KeyboardButton('–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è')

    markup.add(item1, item2, item3)

    markup2 = types.InlineKeyboardMarkup(row_width=4)
    item4 = types.InlineKeyboardButton('–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', callback_data='1')
    item5 = types.InlineKeyboardButton('–û—Ç–¥—ã—Ö', callback_data='2')
    item6 = types.InlineKeyboardButton('–ï–¥–∞', callback_data='3')
    item7 = types.InlineKeyboardButton(
        '–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ', callback_data='4')
    markup2.add(item4, item5, item6, item7)

    markup3 = types.InlineKeyboardMarkup(row_width=3)
    item8 = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data='5')
    item9 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data='6')
    item10 = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ", callback_data='7')
    markup3.add(item8, item9, item10)

    try:
        if call.message:
            if call.data == '1':
                bot.send_message(call.message.chat.id, random.choice(
                    places), reply_markup=markup3)
            elif call.data == '2':
                bot.send_message(call.message.chat.id, random.choice(
                    places2), reply_markup=markup3)
            elif call.data == '3':
                bot.send_message(call.message.chat.id, random.choice(
                    places3), reply_markup=markup3)
            elif call.data == '4':
                bot.send_message(call.message.chat.id, random.choice(
                    places4), reply_markup=markup3)
            elif call.data == '5':  # –ø—Ä–∏–Ω—è—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂
                bot.send_message(
                    call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–º–µ—â–µ–Ω–æ –∫ –≤–∞—Å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.')
            elif call.data == '6':  # –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è
                ph = open(FILEWAY2, 'rb')
                bot.send_message(call.message.chat.id, '–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.',
                                 bot.send_photo(call.message.chat.id, ph), reply_markup=markup2, )
            elif call.data == '7':  # –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ
                bot.send_message(call.message.chat.id,
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=markup2)
            # elif call.data == '8':
            #     bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ')
            #     name = call.message.text
            #     bot.send_message(call.message.chat.id,'–ò–º—è –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
            #     return name
            # elif call.data == '9':
            #     bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=markup)
            # elif call.data == '10':
            #     bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=markup)

            # remove inline buttons
            # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í–æ—Ç –Ω–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω –µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å ?",
            #     reply_markup=None)

            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="–ù–∞—Å—Ç–∞–ª–æ –≤–∞—à–µ –≤—Ä–µ–º—è!")

    except Exception as e:
        print(repr(e))


bot.polling(non_stop=True)








